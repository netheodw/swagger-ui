{
  "x-generator": "NSwag v11.17.3.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v10.0.0.0))",
  "swagger": "2.0",
  "info": {
    "title": "interworks.cloud Billing API",
    "contact": {
      "name": "Interworks.Cloud",
      "email": ""
    },
    "version": "1"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/Accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Gets all accounts",
        "description": "This API call returns all available accounts.",
        "operationId": "Accounts_GetAccounts",
        "parameters": [
          {
            "type": "string",
            "name": "include",
            "in": "query",
            "description": "The include parameter is used to include extra information about the account.\nThe only value that is supported right now is customfields. (default: empty string)",
            "default": "",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "The number of the page to be displayed (default: 1).",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "The number of items per page (default: 25).",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          },
		  {
            "type": "integer",
            "name": "size",
            "in": "header",
            "description": "adasdas.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
		  
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The external accounts with paged data version.",
            "schema": {
              "$ref": "#/definitions/AccountInfoDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      },
      "put": {
        "tags": [
          "Accounts"
        ],
        "summary": "Update an account with the given data",
        "description": "This API call returns Ok if the account was updated",
        "operationId": "Accounts_UpdateAccount",
        "parameters": [
          {
            "name": "account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountDetailsDto"
            },
            "description": "The data of the account.",
            "x-nullable": true
          }
        ],
        "responses": {
          "500001701": {
            "x-nullable": true,
            "description": "Avalara AvaTax is not activated.",
            "schema": {
              "$ref": "#/definitions/AccountAvalaraAvaTaxNotActiveError"
            }
          },
          "500001702": {
            "x-nullable": true,
            "description": "Parameter EntityUsage cannot have value if the country is not USA or Canada.",
            "schema": {
              "$ref": "#/definitions/AccountAvalaraAvaTaxEntityUsageWrongCountryError"
            }
          },
          "404001001": {
            "x-nullable": true,
            "description": "Account not found.",
            "schema": {
              "$ref": "#/definitions/AccountNotFoundError"
            }
          },
          "500001100": {
            "x-nullable": true,
            "description": "Account not updated.",
            "schema": {
              "$ref": "#/definitions/AccountNotUpdatedError"
            }
          },
          "200": {
            "description": "OK (200) if the account was updated successfully."
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Creates an account",
        "description": "This API call creates an account with the given data.",
        "operationId": "Accounts_CreateAccount",
        "parameters": [
          {
            "name": "account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountDetailsDto"
            },
            "description": "The data of the account.",
            "x-nullable": true
          }
        ],
        "responses": {
          "500001701": {
            "x-nullable": true,
            "description": "Avalara AvaTax is not activated.",
            "schema": {
              "$ref": "#/definitions/AccountAvalaraAvaTaxNotActiveError"
            }
          },
          "500001702": {
            "x-nullable": true,
            "description": "Parameter EntityUsage cannot have value if the country is not USA or Canada.",
            "schema": {
              "$ref": "#/definitions/AccountAvalaraAvaTaxEntityUsageWrongCountryError"
            }
          },
          "500012101": {
            "x-nullable": true,
            "description": "Account not created.",
            "schema": {
              "$ref": "#/definitions/AccountNotUpdatedError"
            }
          },
          "200": {
            "x-nullable": false,
            "description": "Ok if the account was created.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountId}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Gets the basic account information for an account",
        "description": "This API call returns account information for a given account id.",
        "operationId": "Accounts_GetAccountById",
        "parameters": [
          {
            "type": "integer",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The ID for the account.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "include",
            "in": "query",
            "description": "The include parameter is used to include extra information about the account. \n            The only value that is supported right now is customfields. (default: empty string)",
            "default": "",
            "x-nullable": true
          }
        ],
        "responses": {
          "404001001": {
            "x-nullable": true,
            "description": "Account not found.",
            "schema": {
              "$ref": "#/definitions/AccountNotFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "Account Data for the given account id.",
            "schema": {
              "$ref": "#/definitions/AccountInfoDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountId}/balance": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Gets the balance for a given account.",
        "description": "This API call returns the balance for a given account.",
        "operationId": "Accounts_GetAccountBalance",
        "parameters": [
          {
            "type": "integer",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The ID for the account.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "404001001": {
            "x-nullable": true,
            "description": "Account not found.",
            "schema": {
              "$ref": "#/definitions/AccountNotFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/AccountBalanceDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountId}/customfields": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Gets the custom fields values of an account",
        "description": "This API call returns the custom fields for a given account.",
        "operationId": "Accounts_GetAccountCustomFields",
        "parameters": [
          {
            "type": "integer",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The id of the account.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "404001001": {
            "x-nullable": true,
            "description": "Account not found.",
            "schema": {
              "$ref": "#/definitions/AccountNotFoundError"
            }
          },
          "404005002": {
            "x-nullable": true,
            "description": "No custom fields found.",
            "schema": {
              "$ref": "#/definitions/NoCustomFieldsFoundError"
            }
          },
          "500002": {
            "x-nullable": true,
            "description": "Invalid API version.",
            "schema": {
              "$ref": "#/definitions/InvalidApiVersionError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "Custom fields for a given account.",
            "schema": {
              "$ref": "#/definitions/CustomFieldDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountId}/externalSystemName/{externalSystemName}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get external object id from an account",
        "description": "This API call returns the external object id from an account.",
        "operationId": "Accounts_GetAccountExternalId",
        "parameters": [
          {
            "type": "integer",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The ID of the Account.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "externalSystemName",
            "in": "path",
            "required": true,
            "description": "The name of the external system.",
            "x-nullable": false
          }
        ],
        "responses": {
          "404001107": {
            "x-nullable": true,
            "description": "The account's synchronization options not saved.",
            "schema": {
              "$ref": "#/definitions/AccountExternalSystemValueNotFoundError"
            }
          },
          "404": {
            "x-nullable": true,
            "description": "\tNot Found - Your URL is wrong, or the requested resource doesn't exist.",
            "schema": {
              "type": "string"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The ID of the external system.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountId}/externalSystem": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Set account's id to external system",
        "description": "This API call sets account's external id.",
        "operationId": "Accounts_SetAccountExternalId",
        "parameters": [
          {
            "type": "integer",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The ID of the Account.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "externalSystem",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountExternalSystemInfo"
            },
            "description": "External's system object.",
            "x-nullable": true
          }
        ],
        "responses": {
          "500001103": {
            "x-nullable": true,
            "description": "The account's external system was not found.",
            "schema": {
              "$ref": "#/definitions/AccountExternalSystemValueNotFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "Returns string \"success\" if everything is ok.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/withoutapifield": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Gets non external accounts",
        "description": "Gets the accounts that has not external id",
        "operationId": "Accounts_GetNonExternalAccounts",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "apiField",
            "in": "query",
            "description": "API field for filtering.",
            "default": "",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "include",
            "in": "query",
            "default": "",
            "x-nullable": true
          }
        ],
        "responses": {
          "404005001": {
            "x-nullable": true,
            "description": "No field found.",
            "schema": {
              "$ref": "#/definitions/FieldNotFoundError"
            }
          },
          "500400": {
            "x-nullable": true,
            "description": "Data was not found.",
            "schema": {
              "$ref": "#/definitions/FieldNotFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The external accounts with paged data version.",
            "schema": {
              "$ref": "#/definitions/AccountInfoDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountCode}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Gets all accounts for a given account code",
        "description": "This API call returns all available accounts for a given account code.",
        "operationId": "Accounts_GetAccountsByCode",
        "parameters": [
          {
            "type": "string",
            "name": "accountCode",
            "in": "path",
            "required": true,
            "description": "The account code.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "include",
            "in": "query",
            "description": "The include parameter is used to include extra information about the account.\nThe only value that is supported right now is customfields. (default: empty string)",
            "default": "",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "The number of the page to be displayed (default: 1).",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "The number of items per page (default: 25).",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The external accounts with paged data version.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountInfoDto"
              }
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountId}/syncoptions": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get account's sync options by id",
        "description": "This API call returns synchronization options for a provisioning system.",
        "operationId": "Accounts_GetAccountSyncOptionsAll",
        "parameters": [
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The ID of the Account.",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Returns the sync options or the given account.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SyncOptions"
              }
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Updates account's sync options",
        "description": "This API call updates sync options for a provisioning system.",
        "operationId": "Accounts_SaveAccountSyncOptions",
        "parameters": [
          {
            "type": "integer",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The ID of the Account.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "syncOptions",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SyncOptionsDto"
            },
            "description": "Sync Options.",
            "x-nullable": true
          }
        ],
        "responses": {
          "500001106": {
            "x-nullable": true,
            "description": "The account's synchronization options not saved",
            "schema": {
              "$ref": "#/definitions/AccountSyncOptionsNotSavedError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "Returns the sync options or the given account.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountId}/syncoptions/{systemcode}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get account's sync options by id and systemcode",
        "description": "This API call returns sync options for a provisioning system.",
        "operationId": "Accounts_GetAccountSyncOptions",
        "parameters": [
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The ID of the Account.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "systemcode",
            "in": "path",
            "required": true,
            "description": "The Code of the System.",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Returns the sync options or the given account.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SyncOptions"
              }
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountId}/subscriptions/{productId}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get account's subscriptions of a specific provioning system\nHelper method.",
        "description": "This API call returns account subscriptions from a product id.",
        "operationId": "Accounts_GetAccountSubscriptions",
        "parameters": [
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The ID of the Account.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "The ID of the Product.",
            "x-nullable": false
          }
        ],
        "responses": {
          "404": {
            "x-nullable": true,
            "description": "\tNot Found - No subscriptions found for the account with id = {id}",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Server Error - If this persists please contact support. We log and review all errors but your help often helps us fix it quicker."
          },
          "200": {
            "x-nullable": true,
            "description": "Returns the account's subscriptions from a product id.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountSubscription"
              }
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountId}/subscriptions/totals": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Gets the total's of an account's sunbscriptions",
        "description": "This API call returns account subscriptions from a product id.",
        "operationId": "Accounts_GetAccountSubscriptionsTotals",
        "parameters": [
          {
            "type": "integer",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The ID of the Account.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "serviceType",
            "in": "query",
            "required": true,
            "description": "The type of the Service.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "systemCode",
            "in": "query",
            "description": "The code of the external system.",
            "default": "",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "systemName",
            "in": "query",
            "description": "The name of the external system.",
            "default": "",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "attribute",
            "in": "query",
            "description": "The name of a specific attribute.",
            "default": "",
            "x-nullable": true
          }
        ],
        "responses": {
          "404": {
            "x-nullable": true,
            "description": "\tNot Found - Your URL is wrong, or the requested resource doesn't exist.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Server Error - If this persists please contact support. We log and review all errors but your help often helps us fix it quicker."
          },
          "200": {
            "x-nullable": true,
            "description": "The total's result object.",
            "schema": {
              "$ref": "#/definitions/AttributesList"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountId}/subscriptions/{subscriptionId}/totals": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Gets Account's product subscriptions",
        "description": "This API call returns account subscriptions from a product id.",
        "operationId": "Accounts_GetAccountSubscriptionsTotals2",
        "parameters": [
          {
            "type": "integer",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The ID of the Account.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The type of the Service.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "attribute",
            "in": "query",
            "description": "The name of a specific attribute.",
            "default": "",
            "x-nullable": true
          }
        ],
        "responses": {
          "404": {
            "x-nullable": true,
            "description": "\tNot Found - Your URL is wrong, or the requested resource doesn't exist.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Server Error - If this persists please contact support. We log and review all errors but your help often helps us fix it quicker."
          },
          "200": {
            "x-nullable": true,
            "description": "The total's result object.",
            "schema": {
              "$ref": "#/definitions/AttributesList"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountId}/subscriptions/productdetails/{productId}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Gets Account's product subscriptions",
        "description": "This API call returns account subscriptions from a product id.",
        "operationId": "Accounts_GetAccountSubscriptionsProductDetails",
        "parameters": [
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The ID of the Account.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "The ID of the Product.",
            "x-nullable": false
          }
        ],
        "responses": {
          "404": {
            "x-nullable": true,
            "description": "\tNot Found - Your URL is wrong, or the requested resource doesn't exist.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Server Error - If this persists please contact support. We log and review all errors but your help often helps us fix it quicker."
          },
          "200": {
            "x-nullable": true,
            "description": "Returns the account's subscriptions from a product id.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountSubscription"
              }
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountId}/azure/subscriptions/estimate": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Gets the estimated consumption amount for all active Azure subscriptions",
        "description": "This API call  returns the estimated consumption amount for all active Azure subscriptions billed to a given account",
        "operationId": "Accounts_GetAccountAzureSubscriptionsEstimatedAmount",
        "parameters": [
          {
            "type": "integer",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The id of the account.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "404023004": {
            "x-nullable": true,
            "description": "No subscriptions found",
            "schema": {
              "$ref": "#/definitions/NoAzureLeasesFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The subscription's estimated data.",
            "schema": {
              "$ref": "#/definitions/LeaseEstimationDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountCode}/azure/subscriptions/estimate": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Gets the estimated consumption amount for all active Azure subscriptions",
        "description": "This API the estimated consumption amount for all active Azure subscriptions billed to a given account.",
        "operationId": "Accounts_GetAccountAzureSubscriptionsEstimatedAmount2",
        "parameters": [
          {
            "type": "string",
            "name": "accountCode",
            "in": "path",
            "required": true,
            "description": "The code of the account.",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "404023004": {
            "x-nullable": true,
            "description": "No subscriptions found",
            "schema": {
              "$ref": "#/definitions/NoAzureLeasesFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The subscription's estimated data.",
            "schema": {
              "$ref": "#/definitions/LeaseEstimationDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountId}/pricelist/set": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Assign pricelist to account.",
        "description": "This API call assigns the given pricelist to the given account and deassigns any other pricelist previously related to the account.",
        "operationId": "Accounts_SetPricelistToAccountById",
        "parameters": [
          {
            "type": "integer",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The account ID.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "pricelist",
            "in": "query",
            "required": true,
            "description": "The pricelist ID.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "removeOtherRelations",
            "in": "query",
            "description": "if set to true [deassign other pricelists from account].",
            "default": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter\nor\nProblem with the request, such as a missing, invalid or type mismatched parameter"
          },
          "500002": {
            "x-nullable": true,
            "description": "Invalid API version",
            "schema": {
              "$ref": "#/definitions/InvalidApiVersionError"
            }
          },
          "500001105": {
            "x-nullable": true,
            "description": "Pricelist not assigned to account.",
            "schema": {
              "$ref": "#/definitions/PricelistNotAssignedToAccountError"
            }
          },
          "404001001": {
            "x-nullable": true,
            "description": "Account not found.",
            "schema": {
              "$ref": "#/definitions/AccountNotFoundError"
            }
          },
          "404021001": {
            "x-nullable": true,
            "description": "Pricelist not found.",
            "schema": {
              "$ref": "#/definitions/PricelistsNotFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "\"success\"",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/Accounts/{accountCode}/pricelist/set": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Assign pricelist to account.",
        "description": "This API call assigns the given pricelist to the given account and deassigns any other pricelist previously related to the account.",
        "operationId": "Accounts_SetPricelistToAccountByCode",
        "parameters": [
          {
            "type": "string",
            "name": "accountCode",
            "in": "path",
            "required": true,
            "description": "The account code.",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "pricelist",
            "in": "query",
            "required": true,
            "description": "The pricelist ID.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "removeOtherRelations",
            "in": "query",
            "description": "if set to true [deassign other pricelists from account].",
            "default": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter\nor\nProblem with the request, such as a missing, invalid or type mismatched parameter"
          },
          "500002": {
            "x-nullable": true,
            "description": "Invalid API version",
            "schema": {
              "$ref": "#/definitions/InvalidApiVersionError"
            }
          },
          "500001103": {
            "x-nullable": true,
            "description": "More than one account found.",
            "schema": {
              "$ref": "#/definitions/MoreThanOneAccountError"
            }
          },
          "500001105": {
            "x-nullable": true,
            "description": "Pricelist not assigned to account.",
            "schema": {
              "$ref": "#/definitions/PricelistNotAssignedToAccountError"
            }
          },
          "404001001": {
            "x-nullable": true,
            "description": "Account not found.",
            "schema": {
              "$ref": "#/definitions/AccountNotFoundError"
            }
          },
          "404021001": {
            "x-nullable": true,
            "description": "Pricelist not found.",
            "schema": {
              "$ref": "#/definitions/PricelistsNotFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "\"success\"",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/Accounts/{accountId}/subscriptions/setpricelist": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Sets the pricelist to account subscrtipions.",
        "description": "This API call sets the given pricelist to the given account's subscriptions except for Trial subscriptions and optionally to subscriptions' addons.",
        "operationId": "Accounts_SetPricelistToAccountSubscriptions",
        "parameters": [
          {
            "type": "integer",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The account ID.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "pricelist",
            "in": "query",
            "required": true,
            "description": "The pricelist ID.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "applyOnAddons",
            "in": "query",
            "required": true,
            "description": "if set to true [set pricelist to addons].",
            "x-nullable": false
          }
        ],
        "responses": {
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter\nor\nProblem with the request, such as a missing, invalid or type mismatched parameter"
          },
          "500002": {
            "x-nullable": true,
            "description": "Invalid API version",
            "schema": {
              "$ref": "#/definitions/InvalidApiVersionError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "a list of subscriptions and addons to which pricelist has been set and the ones that has not been set",
            "schema": {
              "$ref": "#/definitions/LeaseAssignPricelistResponseDto"
            }
          }
        }
      }
    },
    "/api/Accounts/{accountName}/invoices/generate": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Generates invoices for an account name",
        "description": "This API call generates invoices for a specific Account name.",
        "operationId": "Accounts_GenerateInvoicesByAccountName",
        "parameters": [
          {
            "type": "string",
            "name": "accountName",
            "in": "path",
            "required": true,
            "description": "The account name for generating the invoices.",
            "x-nullable": false
          }
        ],
        "responses": {
          "404001104": {
            "x-nullable": true,
            "description": "No invoices for generating found for the account.",
            "schema": {
              "$ref": "#/definitions/InvoicesNotFoundError"
            }
          },
          "404001001": {
            "x-nullable": true,
            "description": "Account not found.",
            "schema": {
              "$ref": "#/definitions/AccountNotFoundError"
            }
          },
          "500001102": {
            "x-nullable": true,
            "description": "Error generating the invoices.",
            "schema": {
              "$ref": "#/definitions/InvoicesNotGeneratedError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "Ok if invoices were generated correctly for the account name.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountId}/BillingAddress": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Gets account's billing address",
        "description": "This API call returns the billing address of the account.",
        "operationId": "Accounts_GetBillingAddress",
        "parameters": [
          {
            "type": "integer",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The ID of the Account.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "404": {
            "description": "Billing Address for account id = {id} not found"
          },
          "500": {
            "description": "Server Error - If this persists please contact support. We log and review all errors but your help often helps us fix it quicker."
          },
          "200": {
            "x-nullable": true,
            "description": "Returns the billing address for the given account.",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountId}/billingOptions": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Gets the billing options for a given account",
        "description": "This API call returns the billing options for a given account.",
        "operationId": "Accounts_GetAccountBillingOptions",
        "parameters": [
          {
            "type": "integer",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The ID of the Account.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "404001001": {
            "x-nullable": true,
            "description": "Account not found.",
            "schema": {
              "$ref": "#/definitions/AccountNotFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "Returns the account's billing options.",
            "schema": {
              "$ref": "#/definitions/AccountBillingOptionsDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Accounts/{accountId}/billingInfo": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Gets the billing information for an account name",
        "description": "This API call returns the billing information for a given account.",
        "operationId": "Accounts_GetAccountMonthlyRunRate",
        "parameters": [
          {
            "type": "integer",
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "The ID for the account.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "404001001": {
            "x-nullable": true,
            "description": "Account not found.",
            "schema": {
              "$ref": "#/definitions/AccountNotFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "Account's Billing Information.",
            "schema": {
              "$ref": "#/definitions/AccountBillingInfoDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Contacts": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Creates a new contact",
        "description": "This API call creates a new contact with the given data.",
        "operationId": "Contacts_CreateContact",
        "parameters": [
          {
            "name": "contact",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactSaveDto"
            },
            "description": "The data of the contact.",
            "x-nullable": true
          }
        ],
        "responses": {
          "500013002": {
            "x-nullable": true,
            "description": "The contact could not be created",
            "schema": {
              "$ref": "#/definitions/ContactNotCreatedError"
            }
          },
          "409013003": {
            "x-nullable": true,
            "description": "contact with email <email> already exists!",
            "schema": {
              "$ref": "#/definitions/ContactWithSameEmailNotCreatedError"
            }
          },
          "200": {
            "x-nullable": false,
            "description": "Returns the contact ID if the contact was created.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter - Invalid Addon ID!"
          }
        }
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates an existing contact",
        "description": "This API call updates an existing contact with the given data.",
        "operationId": "Contacts_UpdateContact",
        "parameters": [
          {
            "name": "contact",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactSaveDto"
            },
            "description": "The data of the contact.",
            "x-nullable": true
          }
        ],
        "responses": {
          "500013002": {
            "x-nullable": true,
            "description": "The contact could not be created",
            "schema": {
              "$ref": "#/definitions/ContactNotCreatedError"
            }
          },
          "409013003": {
            "x-nullable": true,
            "description": "contact with email <email> already exists!",
            "schema": {
              "$ref": "#/definitions/ContactWithSameEmailNotCreatedError"
            }
          },
          "200": {
            "x-nullable": false,
            "description": "Returns the contact ID if the contact was updated.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter - Invalid Addon ID!"
          }
        }
      }
    },
    "/api/Contacts/storefrontuser/resetpassword": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "operationId": "Contacts_StorefrontUserResetPassword",
        "parameters": [
          {
            "name": "contractUsername",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactUsername"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "404002001": {
            "x-nullable": true,
            "description": "User with username <username> was not found!",
            "schema": {
              "$ref": "#/definitions/UserNotFoundError"
            }
          },
          "400013005": {
            "x-nullable": true,
            "description": "Contact has not been activated yet!",
            "schema": {
              "$ref": "#/definitions/ContactNotActivatedError"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter - Invalid Addon ID!"
          }
        }
      }
    },
    "/api/Contacts/storefrontuser/activate": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "operationId": "Contacts_StorefrontUserActivate",
        "parameters": [
          {
            "name": "contractUsername",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactUsername"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "404002001": {
            "x-nullable": true,
            "description": "User with username <username> was not found!",
            "schema": {
              "$ref": "#/definitions/UserNotFoundError"
            }
          },
          "400013004": {
            "x-nullable": true,
            "description": "Contact is already activated!",
            "schema": {
              "$ref": "#/definitions/ContactAlreadyActivatedError"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter - Invalid Addon ID!"
          }
        }
      }
    },
    "/api/Invoices/{id}": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "operationId": "Invoices_GetInvoiceById",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "404024001": {
            "x-nullable": true,
            "description": "Invoice not found.",
            "schema": {
              "$ref": "#/definitions/NoInvoicesFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/InvoiceBillingDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter - Invalid Addon ID!"
          }
        }
      }
    },
    "/api/Invoices": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get all invoice items for a given invoice code.",
        "description": "This API call returns a collection of invoice items for the given invoice code and organization sorted in any of the possible ways.",
        "operationId": "Invoices_GetItemsByInvoiceCode",
        "parameters": [
          {
            "type": "string",
            "name": "invoiceCode",
            "in": "query",
            "required": true,
            "description": "The invoice code.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "description": "Column for sorting.",
            "default": "position",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "order",
            "in": "query",
            "description": "Sorting direction (asc,desc).",
            "default": "asc",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "404024102": {
            "x-nullable": true,
            "description": "No invoice items found",
            "schema": {
              "$ref": "#/definitions/NoInvoicesFoundError"
            }
          },
          "404024001": {
            "x-nullable": true,
            "description": "Invoice not found",
            "schema": {
              "$ref": "#/definitions/NoInvoicesFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "Returns invoice items for the given invoice code.",
            "schema": {
              "$ref": "#/definitions/InvoiceItemDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter - Invalid Addon ID!"
          }
        }
      }
    },
    "/api/Invoices/overdue": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Gets overdue invoices",
        "description": "This API call returns a collection of invoices for the given organization which are overdue sorted in any of the possible ways.",
        "operationId": "Invoices_GetInvoicesOverdue",
        "parameters": [
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "description": "Column for sorting.",
            "default": "InvoiceDate",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "order",
            "in": "query",
            "description": "Sorting direction (asc,desc).",
            "default": "asc",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "404024002": {
            "x-nullable": true,
            "description": "No invoices found",
            "schema": {
              "$ref": "#/definitions/NoInvoicesFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "Returns the overdue invoices data.",
            "schema": {
              "$ref": "#/definitions/InvoiceBillingDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter - Invalid Addon ID!"
          }
        }
      }
    },
    "/api/Invoices/outstanding": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get all invoices of an organization which are outstanding and returns them ordered by a given column",
        "description": "This API call returns a collection of invoices for the given organization which are outstanding sorted in any of the possible ways.",
        "operationId": "Invoices_GetInvoicesOustanding",
        "parameters": [
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "description": "Column for sorting.",
            "default": "InvoiceDate",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "order",
            "in": "query",
            "description": "Sorting direction (asc,desc).",
            "default": "asc",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "404024002": {
            "x-nullable": true,
            "description": "No invoices found",
            "schema": {
              "$ref": "#/definitions/NoInvoicesFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "Returns the oustanding invoices data.",
            "schema": {
              "$ref": "#/definitions/InvoiceBillingDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter - Invalid Addon ID!"
          }
        }
      }
    },
    "/api/Invoices/paid": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get all invoices of an organization which are paid and returns them ordered by a given column",
        "description": "This API call returns a collection of invoices for the given organization which are paid sorted in any of the possible ways.",
        "operationId": "Invoices_GetInvoicesPaid",
        "parameters": [
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "description": "Column for sorting.",
            "default": "DatePaid",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "order",
            "in": "query",
            "description": "Sorting direction (asc,desc).",
            "default": "asc",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "404024002": {
            "x-nullable": true,
            "description": "No invoices found",
            "schema": {
              "$ref": "#/definitions/NoInvoicesFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "Returns the paid invoices data.",
            "schema": {
              "$ref": "#/definitions/InvoiceBillingDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter - Invalid Addon ID!"
          }
        }
      }
    },
    "/api/Invoices/accounts/{accountName}": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get all invoices of an organization for a given account name and returns them ordered by a given column",
        "description": "This API call returns a collection of invoices for the given account and organization sorted in any of the possible ways.",
        "operationId": "Invoices_GetInvoicesByAccountName",
        "parameters": [
          {
            "type": "string",
            "name": "accountName",
            "in": "path",
            "required": true,
            "description": "The name of the account.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "description": "Column for sorting.",
            "default": "InvoiceDate",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "order",
            "in": "query",
            "description": "Sorting direction (asc,desc).",
            "default": "asc",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "404024002": {
            "x-nullable": true,
            "description": "No invoices found",
            "schema": {
              "$ref": "#/definitions/NoInvoicesFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "Returns account's invoices.",
            "schema": {
              "$ref": "#/definitions/InvoiceBillingDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter - Invalid Addon ID!"
          }
        }
      }
    },
    "/api/Invoices/products/{productName}": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get all invoices of an organization for a given product name and returns them ordered by a given column",
        "description": "This API call returns a collection of invoices for the given product name and organization sorted in any of the possible ways.",
        "operationId": "Invoices_GetInvoicesByProductName",
        "parameters": [
          {
            "type": "string",
            "name": "productName",
            "in": "path",
            "required": true,
            "description": "The name of the product.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "description": "Column for sorting.",
            "default": "InvoiceDate",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "order",
            "in": "query",
            "description": "Sorting direction (asc,desc).",
            "default": "asc",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "404024002": {
            "x-nullable": true,
            "description": "No invoices found",
            "schema": {
              "$ref": "#/definitions/NoInvoicesFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "Returns invoices that contain a specific product.",
            "schema": {
              "$ref": "#/definitions/InvoiceBillingDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter - Invalid Addon ID!"
          }
        }
      }
    },
    "/api/Invoices/{invoiceId}/cancel": {
      "put": {
        "tags": [
          "Invoices"
        ],
        "summary": "Cancels an invoice",
        "description": "This API call cancels an invoice for a given invoice id and returns the cancelled invoice.",
        "operationId": "Invoices_CancelInvoice",
        "parameters": [
          {
            "type": "string",
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "description": "The invoice id.",
            "x-nullable": false
          }
        ],
        "responses": {
          "500024100": {
            "x-nullable": true,
            "description": "Invoice not cancelled",
            "schema": {
              "$ref": "#/definitions/NoInvoicesFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "Returns the invoice with its data that was cancelled if everything was Ok.",
            "schema": {
              "$ref": "#/definitions/InvoiceBillingDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter - Invalid Addon ID!"
          }
        }
      }
    },
    "/api/Invoices/{invoiceId}/markpaid": {
      "put": {
        "tags": [
          "Invoices"
        ],
        "summary": "Marks as paid an invoice",
        "description": "/ Marks as paid an invoice for a given invoice id and returns the paid invoice",
        "operationId": "Invoices_MarkAsPaidInvoice",
        "parameters": [
          {
            "type": "string",
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "description": "The invoice id.",
            "x-nullable": false
          }
        ],
        "responses": {
          "500024101": {
            "x-nullable": true,
            "description": "Invoice not marked as paid",
            "schema": {
              "$ref": "#/definitions/NoInvoicesFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "Returns the invoice with its data that was cancelled if everything was Ok.",
            "schema": {
              "$ref": "#/definitions/InvoiceBillingDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter - Invalid Addon ID!"
          }
        }
      }
    },
    "/api/organization/countries": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Gets all oraganization countries",
        "description": "This API call returns a collection of oraganization countries.",
        "operationId": "Organization_GetOrganizationCountries",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "404031200": {
            "x-nullable": true,
            "description": "No countries found!",
            "schema": {
              "$ref": "#/definitions/NoCountriesFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of the organization's countries.",
            "schema": {
              "$ref": "#/definitions/CountryDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/organization/countrystates": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all oraganization countries states",
        "description": "This API call returns a collection of oraganization countries states.",
        "operationId": "Organization_GetOrganizationCountriesStates",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "404031201": {
            "x-nullable": true,
            "description": "No countries found!",
            "schema": {
              "$ref": "#/definitions/NoCountriesStatesFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of organization country states.",
            "schema": {
              "$ref": "#/definitions/CountryStateDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/organization/paymentmethods": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all organization payment methods",
        "description": "This API call returns a collection of oraganization payment methods.",
        "operationId": "Organization_GetOrganizationPaymentMethods",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "500400": {
            "x-nullable": true,
            "description": "Data was not found!",
            "schema": {
              "$ref": "#/definitions/NoDataFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of organization payment methods.",
            "schema": {
              "$ref": "#/definitions/PaymentMethodDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/organization/taxes": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all oraganization taxes",
        "description": "This API call returns a collection of oraganization taxes.",
        "operationId": "Organization_GetOrganizationTaxes",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "500400": {
            "x-nullable": true,
            "description": "Data was not found!",
            "schema": {
              "$ref": "#/definitions/NoDataFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of organization taxes.",
            "schema": {
              "$ref": "#/definitions/TaxSimpleDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/organization/taxes/{taxId}/rules": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all oraganization tax rates",
        "description": "This API call returns a collection of oraganization tax rates.",
        "operationId": "Organization_GetOrganizationTaxRates",
        "parameters": [
          {
            "type": "integer",
            "name": "taxId",
            "in": "path",
            "required": true,
            "description": "The tax ID.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "500400": {
            "x-nullable": true,
            "description": "Data was not found!",
            "schema": {
              "$ref": "#/definitions/NoDataFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of organization tax rates.",
            "schema": {
              "$ref": "#/definitions/TaxRuleDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/organization/taxrules": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all oraganization tax rates",
        "description": "This API call returns a collection of oraganization tax rates based on filter\nlike productTypeId, contry, state etc.",
        "operationId": "Organization_GetOrganizationTaxRatesByProductTypeCountryAndState",
        "parameters": [
          {
            "type": "string",
            "name": "productTypeId",
            "in": "query",
            "description": "The ID of the product type.",
            "default": "",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "country",
            "in": "query",
            "description": "The Country name.",
            "default": "",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "state",
            "in": "query",
            "description": "The State.",
            "default": "",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "500400": {
            "x-nullable": true,
            "description": "Data was not found!",
            "schema": {
              "$ref": "#/definitions/NoDataFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of organization tax rates.",
            "schema": {
              "$ref": "#/definitions/TaxRuleDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/organization/industries": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all oraganization industries",
        "description": "This API call returns a collection of oraganization industries.",
        "operationId": "Organization_GetOrganizationIndustries",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "500400": {
            "x-nullable": true,
            "description": "Data was not found!",
            "schema": {
              "$ref": "#/definitions/NoDataFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of organization industries",
            "schema": {
              "$ref": "#/definitions/IndustryDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/organization/currencies": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all oraganization currencies",
        "description": "Return a collection of oraganization currencies.",
        "operationId": "Organization_GetOrganizationCurrencies",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "500400": {
            "x-nullable": true,
            "description": "Data was not found!",
            "schema": {
              "$ref": "#/definitions/NoDataFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of organization currencies",
            "schema": {
              "$ref": "#/definitions/CurrencyDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/organization/currencies/default": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get default organization currency",
        "description": "Return the default currency of the organization.",
        "operationId": "Organization_GetOrganizationDefaultCurrency",
        "responses": {
          "500400": {
            "x-nullable": true,
            "description": "Data was not found!",
            "schema": {
              "$ref": "#/definitions/NoDataFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The default currency of an organization",
            "schema": {
              "$ref": "#/definitions/CurrencyDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/organization/languages": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all organization languages",
        "description": "Return a collection of organization languages.",
        "operationId": "Organization_GetOrganizationLanguages",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "500400": {
            "x-nullable": true,
            "description": "Data was not found!",
            "schema": {
              "$ref": "#/definitions/NoDataFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of organization languages",
            "schema": {
              "$ref": "#/definitions/PagedResultDtoOfOrganizationLanguageDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/organization/languages/default": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get default organization language",
        "description": "Return the default language of the organization.",
        "operationId": "Organization_GetOrganizationDefaultLanguage",
        "responses": {
          "500400": {
            "x-nullable": true,
            "description": "Data was not found!",
            "schema": {
              "$ref": "#/definitions/NoDataFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The default language of an organization",
            "schema": {
              "$ref": "#/definitions/OrganizationLanguageDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/organization/info": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get Organization Basic Info, such as ID and Name",
        "description": "Return the default language of the organization.",
        "operationId": "Organization_GetOrganizationBaseInfo",
        "responses": {
          "500400": {
            "x-nullable": true,
            "description": "Data was not found!",
            "schema": {
              "$ref": "#/definitions/NoDataFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The default language of an organization",
            "schema": {
              "$ref": "#/definitions/OrganizationLanguageDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/organization/units": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all oraganization units",
        "description": "Return a collection of oraganization units.",
        "operationId": "Organization_GetOrganizationUnits",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "500400": {
            "x-nullable": true,
            "description": "Data was not found!",
            "schema": {
              "$ref": "#/definitions/NoDataFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of organization units",
            "schema": {
              "$ref": "#/definitions/UnitSimpleDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Payments/accounts/{accountName}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get all payments for an account by Name",
        "description": "This API call returns a collection of payments for the given account and\norganization sorted in any of the possible ways.",
        "operationId": "Payments_GetPaymentsByAccountName",
        "parameters": [
          {
            "type": "string",
            "name": "accountName",
            "in": "path",
            "required": true,
            "description": "The name of the account.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "description": "Column for sorting.",
            "default": "PaymentDate",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "order",
            "in": "query",
            "description": "Sorting direction (asc,desc).",
            "default": "asc",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "404025002": {
            "x-nullable": true,
            "description": "No payments found!",
            "schema": {
              "$ref": "#/definitions/NoPaymentsFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of the payments.",
            "schema": {
              "$ref": "#/definitions/PaymentBillingDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Payments": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get all payments by createdDate or payment type",
        "description": "This API call returns a collection of payments for a given created date or payment type\nand organization sorted in any of the possible ways.",
        "operationId": "Payments_GetPayments",
        "parameters": [
          {
            "type": "string",
            "name": "createdDate",
            "in": "query",
            "description": "The creation date of the payment.",
            "default": "",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "paymentType",
            "in": "query",
            "description": "Sorting direction (asc,desc).",
            "default": "",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "description": "Column for sorting.",
            "default": "PaymentDate",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "order",
            "in": "query",
            "description": "Sorting direction (asc,desc).",
            "default": "asc",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "500001": {
            "x-nullable": true,
            "description": "Invalid date format.",
            "schema": {
              "$ref": "#/definitions/InvalidDateFormatError"
            }
          },
          "404025002": {
            "x-nullable": true,
            "description": "No payments found.",
            "schema": {
              "$ref": "#/definitions/NoPaymentsFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of the payments.",
            "schema": {
              "$ref": "#/definitions/PaymentBillingDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Payments/status/{status}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get all payments by status",
        "description": "This API call returns a collection of payments for the given status and\norganization sorted in any of the possible ways.",
        "operationId": "Payments_GetPaymentsByStatus",
        "parameters": [
          {
            "type": "string",
            "name": "status",
            "in": "path",
            "required": true,
            "description": "The status of the payment.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "description": "Column for sorting.",
            "default": "PaymentDate",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "order",
            "in": "query",
            "description": "Sorting direction (asc,desc).",
            "default": "asc",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "404025002": {
            "x-nullable": true,
            "description": "Invalid date format.",
            "schema": {
              "$ref": "#/definitions/NoPaymentsFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of the payments.",
            "schema": {
              "$ref": "#/definitions/PaymentBillingDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Payments/add": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Adds a payment",
        "description": "This API call adds a payment and returns Ok if the payment was added.",
        "operationId": "Payments_AddPayment",
        "parameters": [
          {
            "name": "payment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentSaveDto"
            },
            "description": "The data for the payment.",
            "x-nullable": true
          }
        ],
        "responses": {
          "500025100": {
            "x-nullable": true,
            "description": "Payment could not be added!",
            "schema": {
              "$ref": "#/definitions/PaymentNotAddedError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "(200) Ok",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Payments/import": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Imports a collection of payments",
        "description": "This API call returns Ok if all the payments were added, or Ok with a list of failed payments",
        "operationId": "Payments_ImportPayments",
        "parameters": [
          {
            "name": "payments",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentSaveDto"
              }
            },
            "description": "The data for the payments to be imported.",
            "x-nullable": true
          }
        ],
        "responses": {
          "500025101": {
            "x-nullable": true,
            "description": "One or more payments were not imported successfully",
            "schema": {
              "$ref": "#/definitions/PaymentsNotImportedError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "(200) Ok if the payments were added",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/pricelists": {
      "get": {
        "tags": [
          "Pricelists"
        ],
        "summary": "Get all oraganization pricelists",
        "description": "This API call returns a collection of oraganization pricelists.",
        "operationId": "Pricelists_GetOrganizationPricelists",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "500400": {
            "x-nullable": true,
            "description": "Data was not found!",
            "schema": {
              "$ref": "#/definitions/NoDataFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of the organization's pricelists.",
            "schema": {
              "$ref": "#/definitions/PricelistsDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/pricelists/{pricelistId}/items": {
      "get": {
        "tags": [
          "Pricelists"
        ],
        "summary": "Get all oraganization pricelists",
        "description": "This API call returns a collection of oraganization pricelists.",
        "operationId": "Pricelists_GetOrganizationPricelistItems",
        "parameters": [
          {
            "type": "integer",
            "name": "pricelistId",
            "in": "path",
            "required": true,
            "description": "The ID of the pricelist.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "500400": {
            "x-nullable": true,
            "description": "Data was not found!",
            "schema": {
              "$ref": "#/definitions/NoDataFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of the organization's pricelists items.",
            "schema": {
              "$ref": "#/definitions/PricelistItemDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Products/{productId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product by product id",
        "description": "This API call returns a specific product's data by a given product id.",
        "operationId": "Products_GetProductById",
        "parameters": [
          {
            "type": "string",
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "The product's id.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "include",
            "in": "query",
            "description": "Additional objects to be loaded, e.g. 'customfields'",
            "default": "",
            "x-nullable": true
          }
        ],
        "responses": {
          "404028001": {
            "x-nullable": true,
            "description": "product with id 'productId' was not found!",
            "schema": {
              "$ref": "#/definitions/ProductNotFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The product's data.",
            "schema": {
              "$ref": "#/definitions/ProductLoadDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Products/{productName}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product by product name",
        "description": "This API call returns a specific product's data by a given product name.",
        "operationId": "Products_GetProductByName",
        "parameters": [
          {
            "type": "string",
            "name": "productName",
            "in": "path",
            "required": true,
            "description": "The product's name.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "include",
            "in": "query",
            "description": "The include parameters",
            "default": "",
            "x-nullable": true
          }
        ],
        "responses": {
          "404028001": {
            "x-nullable": true,
            "description": "Product with name 'productName' was not found!",
            "schema": {
              "$ref": "#/definitions/ProductNotFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The product's data.",
            "schema": {
              "$ref": "#/definitions/ProductLoadDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product by product id",
        "description": "This API call returns a specific product's data by a given product id.",
        "operationId": "Products_GetProductById2",
        "parameters": [
          {
            "type": "string",
            "name": "productId",
            "in": "query",
            "required": true,
            "description": "The product's id.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "include",
            "in": "query",
            "description": "Additional objects to be loaded, e.g. 'customfields'",
            "default": "",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The product's data.",
            "schema": {
              "type": "file"
            }
          }
        }
      }
    },
    "/api/Subscriptions/{subscriptionId}/attributes": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get subscription's attributes",
        "description": "Returns the attributes of a subscription synchronized with an external system",
        "operationId": "Subscriptions_GetAttributes",
        "parameters": [
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The external ID of the subscription",
            "x-nullable": false
          }
        ],
        "responses": {
          "404": {
            "description": "No attributes found for the subscription with id = {SubscriptionID}"
          },
          "500": {
            "description": "Server Error - If this persists please contact support. We log and review all errors but your help often helps us fix it quicker."
          },
          "200": {
            "x-nullable": true,
            "description": "Returns the attributes list for the given subscription.",
            "schema": {
              "$ref": "#/definitions/AttributesList"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Subscriptions/{subscriptionId}/azureusagerecords": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Gets the azure subscription usage records",
        "description": "This API call gets the azure subscription usage records for a given Azure subscription and a given period.",
        "operationId": "Subscriptions_GetAzureSubscriptionUsageRecords",
        "parameters": [
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The id of the subscription.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "startDate",
            "in": "query",
            "required": true,
            "description": "The start date of the period.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "endDate",
            "in": "query",
            "required": true,
            "description": "The end date of the period.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "500001": {
            "x-nullable": true,
            "description": "Invalid date format.",
            "schema": {
              "$ref": "#/definitions/InvalidDateFormatError"
            }
          },
          "404023001": {
            "x-nullable": true,
            "description": "Lease not found.",
            "schema": {
              "$ref": "#/definitions/LeaseNotFoundError"
            }
          },
          "404023005": {
            "x-nullable": true,
            "description": "\tNo usage records found.",
            "schema": {
              "$ref": "#/definitions/NoLeaseUsageRecordsFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of the azure subscriptions usage records.",
            "schema": {
              "$ref": "#/definitions/UsageSimpleDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Subscriptions": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Creates a subscription",
        "description": "This API call creates a subscrioption with the given data.",
        "operationId": "Subscriptions_CreateSubscription",
        "parameters": [
          {
            "name": "subscription",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LeaseDto"
            },
            "description": "The data of the subscription.",
            "x-nullable": true
          }
        ],
        "responses": {
          "500023002": {
            "x-nullable": true,
            "description": "The subscription could not be created.",
            "schema": {
              "$ref": "#/definitions/LeaseNotCreatedError"
            }
          },
          "500023009": {
            "x-nullable": true,
            "description": "The subscription could not be created. Subscription(s) for mutually excluded products exist.",
            "schema": {
              "$ref": "#/definitions/MutuallyExcludedSubscriptionFoundError"
            }
          },
          "200": {
            "x-nullable": false,
            "description": "The new subscription id that was created.",
            "schema": {
              "type": "string",
              "format": "guid"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Subscriptions/{subscriptionId}/cancel": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Cancels a subscription",
        "description": "This API call cancels an existing subscription (non locked).",
        "operationId": "Subscriptions_CancelSubscription",
        "parameters": [
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The id of the subscription.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "actionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelSubscriptionRequestDto"
            },
            "description": "The action request to perform on the subscription.",
            "x-nullable": true
          }
        ],
        "responses": {
          "404023001": {
            "x-nullable": true,
            "description": "The subscription was not found.",
            "schema": {
              "$ref": "#/definitions/LeaseNotFoundError"
            }
          },
          "403000001": {
            "x-nullable": true,
            "description": "User does not have permission for action.",
            "schema": {
              "$ref": "#/definitions/PermissionDeniedServiceError"
            }
          },
          "500023010": {
            "x-nullable": true,
            "description": "The subscription could not be cancelled.",
            "schema": {
              "$ref": "#/definitions/LeaseNotCancelledError"
            }
          },
          "500023018": {
            "x-nullable": true,
            "description": "The effective date is invalid.",
            "schema": {
              "$ref": "#/definitions/InvalidEffectiveDateError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "SubscriptionActionResponseDto",
            "schema": {
              "$ref": "#/definitions/SubscriptionActionResponseDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Subscriptions/{subscriptionId}/quantity": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Changes the quantity of a subscription",
        "description": "This API call changes the quantity of an existing subscription.",
        "operationId": "Subscriptions_ChangeSubscriptionQuantity",
        "parameters": [
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The id of the subscription.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "actionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeSubscriptionQuantityRequestDto"
            },
            "description": "The action request to perform on the subscription.",
            "x-nullable": true
          }
        ],
        "responses": {
          "404023001": {
            "x-nullable": true,
            "description": "The subscription was not found.",
            "schema": {
              "$ref": "#/definitions/LeaseNotFoundError"
            }
          },
          "403000001": {
            "x-nullable": true,
            "description": "User does not have permission for action.",
            "schema": {
              "$ref": "#/definitions/PermissionDeniedServiceError"
            }
          },
          "500023014": {
            "x-nullable": true,
            "description": "The subscription quantity could not be changed.",
            "schema": {
              "$ref": "#/definitions/LeaseQuantityNotChangedError"
            }
          },
          "500023018": {
            "x-nullable": true,
            "description": "The effective date is invalid.",
            "schema": {
              "$ref": "#/definitions/InvalidEffectiveDateError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "SubscriptionActionResponseDto",
            "schema": {
              "$ref": "#/definitions/SubscriptionActionResponseDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Subscriptions/{subscriptionId}/suspend": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Suspends a subscription",
        "description": "This API call suspends an existing subscription.\nThe effective date should be empty or null, the current user date will be used automatically",
        "operationId": "Subscriptions_SuspendSubscription",
        "parameters": [
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The id of the subscription.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "actionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionActionRequestDto"
            },
            "description": "The action request to perform on the subscription.",
            "x-nullable": true
          }
        ],
        "responses": {
          "404023001": {
            "x-nullable": true,
            "description": "The subscription was not found.",
            "schema": {
              "$ref": "#/definitions/LeaseNotFoundError"
            }
          },
          "403000001": {
            "x-nullable": true,
            "description": "User does not have permission for action.",
            "schema": {
              "$ref": "#/definitions/PermissionDeniedServiceError"
            }
          },
          "500023013": {
            "x-nullable": true,
            "description": "The subscription could not be suspended.",
            "schema": {
              "$ref": "#/definitions/LeaseNotSuspendedError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "SubscriptionActionResponseDto",
            "schema": {
              "$ref": "#/definitions/SubscriptionActionResponseDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Subscriptions/{subscriptionId}/activate": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Activates a subscription",
        "description": "This API call activates an existing subscription.",
        "operationId": "Subscriptions_ActivateSubscription",
        "parameters": [
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The id of the subscription.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "actionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActivateSubscriptionRequestDto"
            },
            "description": "The action request to perform on the subscription.",
            "x-nullable": true
          }
        ],
        "responses": {
          "404023001": {
            "x-nullable": true,
            "description": "The subscription was not found.",
            "schema": {
              "$ref": "#/definitions/LeaseNotFoundError"
            }
          },
          "403000001": {
            "x-nullable": true,
            "description": "User does not have permission for action.",
            "schema": {
              "$ref": "#/definitions/PermissionDeniedServiceError"
            }
          },
          "500023012": {
            "x-nullable": true,
            "description": "The subscription could not be activated.",
            "schema": {
              "$ref": "#/definitions/LeaseNotActivatedError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "SubscriptionActionResponseDto",
            "schema": {
              "$ref": "#/definitions/SubscriptionActionResponseDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Subscriptions/{subscriptionId}/pricinginfo": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Changes the pricing information of a subscription",
        "description": "This API call changes the pricing information of an existing subscription.",
        "operationId": "Subscriptions_ChangeSubscriptionPricingInfo",
        "parameters": [
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The id of the subscription.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "actionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeSubscriptionPricingRequestDto"
            },
            "description": "The action request to perform on the subscription.",
            "x-nullable": true
          }
        ],
        "responses": {
          "404023001": {
            "x-nullable": true,
            "description": "The subscription was not found.",
            "schema": {
              "$ref": "#/definitions/LeaseNotFoundError"
            }
          },
          "403000001": {
            "x-nullable": true,
            "description": "User does not have permission for action.",
            "schema": {
              "$ref": "#/definitions/PermissionDeniedServiceError"
            }
          },
          "404028201": {
            "x-nullable": true,
            "description": "Unit not found.",
            "schema": {
              "$ref": "#/definitions/UnitNotFoundError"
            }
          },
          "500023016": {
            "x-nullable": true,
            "description": "The subscription pricing information could not be changed.",
            "schema": {
              "$ref": "#/definitions/LeasePricingInfoNotChangedError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "SubscriptionActionResponseDto",
            "schema": {
              "$ref": "#/definitions/SubscriptionActionResponseDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Subscriptions/{subscriptionId}/addon/{addonId}/pricinginfo": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Changes the pricing information of a subscription addon",
        "description": "This API call changes the pricing information of an existing subscription addon.",
        "operationId": "Subscriptions_ChangeSubscriptionAddonPricingInfo",
        "parameters": [
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The id of the subscription.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "addonId",
            "in": "path",
            "required": true,
            "description": "The id of the addon.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "actionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeSubscriptionAddonPricingRequestDto"
            },
            "description": "The action request to perform on the subscription.",
            "x-nullable": true
          }
        ],
        "responses": {
          "404023001": {
            "x-nullable": true,
            "description": "The subscription was not found.",
            "schema": {
              "$ref": "#/definitions/LeaseNotFoundError"
            }
          },
          "404560001": {
            "x-nullable": true,
            "description": "The addon was not found.",
            "schema": {
              "$ref": "#/definitions/AddonItemNotFoundError"
            }
          },
          "403000001": {
            "x-nullable": true,
            "description": "User does not have permission for action.",
            "schema": {
              "$ref": "#/definitions/PermissionDeniedServiceError"
            }
          },
          "500023017": {
            "x-nullable": true,
            "description": "The subscription addon pricing information could not be changed.",
            "schema": {
              "$ref": "#/definitions/LeaseAddonPricingInfoNotChangedError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "SubscriptionActionResponseDto",
            "schema": {
              "$ref": "#/definitions/SubscriptionActionResponseDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Subscriptions/addon": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Adds an addon to a subscription",
        "description": "This API call adds an addon to existing subscription with the given addon's data.",
        "operationId": "Subscriptions_SubscriptionAddon",
        "parameters": [
          {
            "name": "leaseAddon",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LeaseAddonDto"
            },
            "description": "The data of the subscription's addon.",
            "x-nullable": true
          }
        ],
        "responses": {
          "500023003": {
            "x-nullable": true,
            "description": "The addon could not added to subscription.",
            "schema": {
              "$ref": "#/definitions/LeaseAddonNotAddedError"
            }
          },
          "200": {
            "description": "OK (200) if the account was updated successfully."
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Subscriptions/{subscriptionId}/addon/{addonId}/cancel": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Cancels a subscription addon",
        "description": "This API call cancels an existing subscription addon.",
        "operationId": "Subscriptions_CancelSubscriptionAddon",
        "parameters": [
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The id of the subscription.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "addonId",
            "in": "path",
            "required": true,
            "description": "The id of the addon.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "actionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelSubscriptionAddonRequestDto"
            },
            "description": "The action request to perform on the subscription.",
            "x-nullable": true
          }
        ],
        "responses": {
          "404023001": {
            "x-nullable": true,
            "description": "The subscription was not found.",
            "schema": {
              "$ref": "#/definitions/LeaseNotFoundError"
            }
          },
          "404560001": {
            "x-nullable": true,
            "description": "The addon was not found.",
            "schema": {
              "$ref": "#/definitions/AddonItemNotFoundError"
            }
          },
          "403000001": {
            "x-nullable": true,
            "description": "User does not have permission for action.",
            "schema": {
              "$ref": "#/definitions/PermissionDeniedServiceError"
            }
          },
          "500023011": {
            "x-nullable": true,
            "description": "The addon could not be cancelled.",
            "schema": {
              "$ref": "#/definitions/LeaseAddonNotCancelledError"
            }
          },
          "500023018": {
            "x-nullable": true,
            "description": "The effective date is invalid.",
            "schema": {
              "$ref": "#/definitions/InvalidEffectiveDateError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "SubscriptionActionResponseDto",
            "schema": {
              "$ref": "#/definitions/SubscriptionActionResponseDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Subscriptions/{subscriptionId}/addon/{addonId}/quantity": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Changes the quantity of a subscription addon",
        "description": "This API call changes the quantity of an existing subscription addon.",
        "operationId": "Subscriptions_ChangeSubscriptionAddonQuantity",
        "parameters": [
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The id of the subscription.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "addonId",
            "in": "path",
            "required": true,
            "description": "The id of the addon.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "actionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeSubscriptionQuantityRequestDto"
            },
            "description": "The action request to perform on the subscription.",
            "x-nullable": true
          }
        ],
        "responses": {
          "404023001": {
            "x-nullable": true,
            "description": "The subscription was not found.",
            "schema": {
              "$ref": "#/definitions/LeaseNotFoundError"
            }
          },
          "404560001": {
            "x-nullable": true,
            "description": "The addon was not found.",
            "schema": {
              "$ref": "#/definitions/AddonItemNotFoundError"
            }
          },
          "403000001": {
            "x-nullable": true,
            "description": "User does not have permission for action.",
            "schema": {
              "$ref": "#/definitions/PermissionDeniedServiceError"
            }
          },
          "500023015": {
            "x-nullable": true,
            "description": "The subscription quantity could not be changed.",
            "schema": {
              "$ref": "#/definitions/LeaseAddonQuantityNotChangedError"
            }
          },
          "500023019": {
            "x-nullable": true,
            "description": "The subscription addon quantity limit has been reached.",
            "schema": {
              "$ref": "#/definitions/LeaseQuantityLimitReachedError"
            }
          },
          "500023018": {
            "x-nullable": true,
            "description": "The effective date is invalid.",
            "schema": {
              "$ref": "#/definitions/InvalidEffectiveDateError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "SubscriptionActionResponseDto",
            "schema": {
              "$ref": "#/definitions/SubscriptionActionResponseDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/Subscriptions/{subscriptionId}/customfields": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Gets the custom fields values of a subscription.",
        "description": "This API call returns the custom fields for a given subscription.",
        "operationId": "Subscriptions_GetSubscriptionCustomFields",
        "parameters": [
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The id of the subscription.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "404023001": {
            "x-nullable": true,
            "description": "Lease not found.",
            "schema": {
              "$ref": "#/definitions/LeaseNotFoundError"
            }
          },
          "404005002": {
            "x-nullable": true,
            "description": "No custom fields found.",
            "schema": {
              "$ref": "#/definitions/NoCustomFieldsFoundError"
            }
          },
          "500002": {
            "x-nullable": true,
            "description": "Invalid API version.",
            "schema": {
              "$ref": "#/definitions/InvalidApiVersionError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "Custom fields for a given account.",
            "schema": {
              "$ref": "#/definitions/CustomFieldDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/system/countries": {
      "get": {
        "tags": [
          "SystemValues"
        ],
        "summary": "Get all system countries",
        "description": "This API call returns a collection of system countries.",
        "operationId": "SystemValues_GetSystemCountries",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "404023001": {
            "x-nullable": true,
            "description": "No system countries found.",
            "schema": {
              "$ref": "#/definitions/NoSystemCountriesFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of system countries.",
            "schema": {
              "$ref": "#/definitions/SysCountryDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/system/countrystates": {
      "get": {
        "tags": [
          "SystemValues"
        ],
        "summary": "Get all system countries states",
        "description": "This API call returns a collection of system countries states.",
        "operationId": "SystemValues_GetSystemCountriesStates",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "404023001": {
            "x-nullable": true,
            "description": "No system countries states found.",
            "schema": {
              "$ref": "#/definitions/NoSystemCountriesStatesFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of system countries states.",
            "schema": {
              "$ref": "#/definitions/SysCountryStateDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/system/invoicestatuses": {
      "get": {
        "tags": [
          "SystemValues"
        ],
        "summary": "Get all system invoice statuses",
        "description": "This API call returns a collection of system invoice statuses.",
        "operationId": "SystemValues_GetSystemInvoiceStatuses",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "500400": {
            "x-nullable": true,
            "description": "Data was not found.",
            "schema": {
              "$ref": "#/definitions/NoDataFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of invoices statuses.",
            "schema": {
              "$ref": "#/definitions/SysCountryStateDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    },
    "/api/system/invoicetypes": {
      "get": {
        "tags": [
          "SystemValues"
        ],
        "summary": "Get all system invoice types.",
        "description": "This API call returns a collection of system invoice statuses.",
        "operationId": "SystemValues_GetSystemInvoiceTypes",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page for results.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "Page size for results.",
            "format": "int32",
            "default": 25,
            "x-nullable": false
          }
        ],
        "responses": {
          "500400": {
            "x-nullable": true,
            "description": "Data was not found.",
            "schema": {
              "$ref": "#/definitions/NoDataFoundError"
            }
          },
          "200": {
            "x-nullable": true,
            "description": "The list of invoices types.",
            "schema": {
              "$ref": "#/definitions/SysInvoiceTypesDto"
            }
          },
          "400": {
            "description": "Problem with the request, such as a missing, invalid or type mismatched parameter"
          }
        }
      }
    }
  },
  "definitions": {
    "AccountInfoDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "separateInvoicesEnabled",
        "isLead"
      ],
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountAddressDto"
          }
        },
        "customFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldDto"
          }
        },
        "entityUsage": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "registrationNumber": {
          "type": "string"
        },
        "taxAuthority": {
          "type": "string"
        },
        "businessActivity": {
          "type": "string"
        },
        "enableOrdering": {
          "type": "boolean"
        },
        "email": {
          "type": "string",
          "format": "email",
          "pattern": "^([a-zA-Z0-9_\\-\\.]+@([a-zA-Z0-9_\\-]+\\.)+[a-zA-Z0-9]{2,12})*$"
        },
        "billToAccountId": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "industry": {
          "type": "string"
        },
        "webSite": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "tradingName": {
          "type": "string"
        },
        "prorateBillingEnabled": {
          "type": "boolean"
        },
        "prorateBillingDate": {
          "type": "string"
        },
        "creditLimit": {
          "type": "string"
        },
        "partialChargesInvoicing": {
          "type": "string"
        },
        "separateInvoicesEnabled": {
          "type": "boolean"
        },
        "enableReselling": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "isLead": {
          "type": "boolean"
        },
        "autoInvoiceNotificationEnabled": {
          "type": "boolean"
        },
        "isTaxable": {
          "type": "boolean"
        },
        "paymentMethod": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "currencyCode": {
          "type": "string"
        },
        "transactionCurrency": {
          "type": "string"
        }
      }
    },
    "AccountAddressDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "isBilling"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "postCode": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "stateCode": {
          "type": "string"
        },
        "isBilling": {
          "type": "boolean"
        }
      }
    },
    "CustomFieldDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "kind",
        "dataType",
        "required",
        "decimals",
        "readOnly"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "group": {
          "$ref": "#/definitions/CustomFieldGroupDto"
        },
        "kind": {
          "$ref": "#/definitions/CustomFieldKind"
        },
        "dataType": {
          "$ref": "#/definitions/CustomFieldDataType"
        },
        "required": {
          "type": "boolean"
        },
        "decimals": {
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "$ref": "#/definitions/CustomFieldValueDto"
        },
        "readOnly": {
          "type": "boolean"
        },
        "apiField": {
          "type": "string"
        },
        "formulaValue": {
          "type": "string"
        },
        "valuesList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldValuesListValueDto"
          }
        }
      }
    },
    "CustomFieldGroupDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CustomFieldKind": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "SimpleValue",
        "List",
        "TextArea",
        "ListMultiSelect",
        "Boolean",
        "Link",
        "Mask",
        "MOD11CheckDigit",
        "Unknown"
      ],
      "enum": [
        "SimpleValue",
        "List",
        "TextArea",
        "ListMultiSelect",
        "Boolean",
        "Link",
        "Mask",
        "MOD11CheckDigit",
        "Unknown"
      ]
    },
    "CustomFieldDataType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Text",
        "Number",
        "Currency",
        "Date",
        "Unknown"
      ],
      "enum": [
        "Text",
        "Number",
        "Currency",
        "Date",
        "Unknown"
      ]
    },
    "CustomFieldValueDto": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "CustomFieldValuesListValueDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "AccountNotFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "entity": {
          "type": "string"
        },
        "propery": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "AccountDetailsDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "separateInvoicesEnabled",
        "isLead"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/AccountAddressDto"
        },
        "customFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomField"
          }
        },
        "entityUsage": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "registrationNumber": {
          "type": "string"
        },
        "taxAuthority": {
          "type": "string"
        },
        "businessActivity": {
          "type": "string"
        },
        "enableOrdering": {
          "type": "boolean"
        },
        "email": {
          "type": "string",
          "format": "email",
          "pattern": "^([a-zA-Z0-9_\\-\\.]+@([a-zA-Z0-9_\\-]+\\.)+[a-zA-Z0-9]{2,12})*$"
        },
        "billToAccountId": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "industry": {
          "type": "string"
        },
        "webSite": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "tradingName": {
          "type": "string"
        },
        "prorateBillingEnabled": {
          "type": "boolean"
        },
        "prorateBillingDate": {
          "type": "string"
        },
        "creditLimit": {
          "type": "string"
        },
        "partialChargesInvoicing": {
          "type": "string"
        },
        "separateInvoicesEnabled": {
          "type": "boolean"
        },
        "enableReselling": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "isLead": {
          "type": "boolean"
        },
        "autoInvoiceNotificationEnabled": {
          "type": "boolean"
        },
        "isTaxable": {
          "type": "boolean"
        },
        "paymentMethod": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "currencyCode": {
          "type": "string"
        },
        "transactionCurrency": {
          "type": "string"
        }
      }
    },
    "CustomField": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "apiField"
      ],
      "properties": {
        "apiField": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "AccountAvalaraAvaTaxNotActiveError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "AccountAvalaraAvaTaxEntityUsageWrongCountryError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "AccountNotUpdatedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "AccountBalanceDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "balance",
        "debitInvoicesTotal",
        "debitInvoicesCount",
        "creditInvoicesTotal",
        "creditInvoicesCount",
        "paymentsTotal",
        "paymentsCount",
        "refundsTotal",
        "refundsCount"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "balance": {
          "type": "number",
          "format": "double"
        },
        "debitInvoicesTotal": {
          "type": "number",
          "format": "double"
        },
        "debitInvoicesCount": {
          "type": "integer",
          "format": "int32"
        },
        "creditInvoicesTotal": {
          "type": "number",
          "format": "double"
        },
        "creditInvoicesCount": {
          "type": "integer",
          "format": "int32"
        },
        "paymentsTotal": {
          "type": "number",
          "format": "double"
        },
        "paymentsCount": {
          "type": "integer",
          "format": "int32"
        },
        "refundsTotal": {
          "type": "number",
          "format": "double"
        },
        "refundsCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "NoCustomFieldsFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "InvalidApiVersionError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "AccountExternalSystemValueNotFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "entity": {
          "type": "string"
        },
        "propery": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "AccountExternalSystemInfo": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "systemName",
        "externalId"
      ],
      "properties": {
        "systemName": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        }
      }
    },
    "FieldNotFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "entity": {
          "type": "string"
        },
        "propery": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "SyncOptions": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "systemID"
      ],
      "properties": {
        "systemID": {
          "type": "integer",
          "format": "int32"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SyncOption"
          }
        }
      }
    },
    "SyncOption": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "Name"
        },
        "value": {
          "type": "string",
          "description": "Value"
        },
        "alias": {
          "type": "string",
          "description": "Alias"
        }
      }
    },
    "SyncOptionsDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "systemName",
        "systemCode"
      ],
      "properties": {
        "systemName": {
          "type": "string"
        },
        "systemCode": {
          "type": "string"
        },
        "customFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomField"
          }
        }
      }
    },
    "AccountSyncOptionsNotSavedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "AccountSubscription": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "stageType"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "quantity": {
          "type": "string"
        },
        "stageType": {
          "$ref": "#/definitions/ServiceStatus"
        },
        "account": {
          "$ref": "#/definitions/AccountData"
        },
        "billingAccount": {
          "$ref": "#/definitions/BillingAccountData"
        },
        "attributeList": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ServiceAttributeDefinition"
          }
        },
        "addons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddonDefinition"
          }
        }
      }
    },
    "ServiceStatus": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "All",
        "Active",
        "Suspended",
        "Inactive",
        "Cancelled",
        "PendingCancellation"
      ],
      "enum": [
        "All",
        "Active",
        "Suspended",
        "Inactive",
        "Cancelled",
        "PendingCancellation"
      ]
    },
    "AccountData": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        }
      }
    },
    "BillingAccountData": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        }
      }
    },
    "ServiceAttributeDefinition": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "quantityLinked"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "quantityLinked": {
          "type": "boolean"
        }
      }
    },
    "AddonDefinition": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "actionType",
        "quantity"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "productID": {
          "type": "string"
        },
        "actionType": {
          "$ref": "#/definitions/ActionType"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "attributeList": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ServiceAttributeDefinition"
          }
        }
      }
    },
    "ActionType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "None",
        "Provision",
        "Cancel",
        "Suspend",
        "Activate"
      ],
      "enum": [
        "None",
        "Provision",
        "Cancel",
        "Suspend",
        "Activate"
      ]
    },
    "AttributesList": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeData"
          }
        }
      }
    },
    "AttributeData": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "valueExternal": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "NoAzureLeasesFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "LeaseEstimationDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "subscriptionId",
        "accountId",
        "estimatedAmount"
      ],
      "properties": {
        "subscriptionId": {
          "type": "string",
          "format": "guid"
        },
        "accountId": {
          "type": "integer",
          "format": "int32"
        },
        "estimatedAmount": {
          "type": "number",
          "format": "decimal"
        }
      }
    },
    "PricelistNotAssignedToAccountError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "PricelistsNotFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "entity": {
          "type": "string"
        },
        "propery": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "MoreThanOneAccountError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "LeaseAssignPricelistResponseDto": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "successfulSubscriptionAssignments": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "guid"
          }
        },
        "excludedSubscriptionAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotAssignedPricelistLeaseDto"
          }
        },
        "successfulAddonAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LeaseAddonSimpleDto"
          }
        },
        "excludedAddonAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotAssignedPricelistAddonDto"
          }
        }
      }
    },
    "NotAssignedPricelistLeaseDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "subscriptionId"
      ],
      "properties": {
        "subscriptionId": {
          "type": "string",
          "format": "guid"
        },
        "reasons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotAssignedPricelistReason"
          }
        }
      }
    },
    "NotAssignedPricelistReason": {
      "type": "integer",
      "description": "",
      "x-enumNames": [
        "UserDefinedPrice",
        "UnderPromotion",
        "PriceProtectionEnabled",
        "PricelistNotAvailable",
        "PricelistAlreadyAssigned",
        "PricelistAssignError"
      ],
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5
      ]
    },
    "LeaseAddonSimpleDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "subscriptionId",
        "addonId"
      ],
      "properties": {
        "subscriptionId": {
          "type": "string",
          "format": "guid"
        },
        "addonId": {
          "type": "string",
          "format": "guid"
        }
      }
    },
    "NotAssignedPricelistAddonDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "subscriptionId",
        "addonId"
      ],
      "properties": {
        "subscriptionId": {
          "type": "string",
          "format": "guid"
        },
        "addonId": {
          "type": "string",
          "format": "guid"
        },
        "reasons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotAssignedPricelistReason"
          }
        }
      }
    },
    "InvoicesNotFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "InvoicesNotGeneratedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "Address": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "isBilling"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Address ID"
        },
        "name": {
          "type": "string",
          "description": "Address Name"
        },
        "address1": {
          "type": "string",
          "description": "Address 1"
        },
        "address2": {
          "type": "string",
          "description": "Address 2"
        },
        "city": {
          "type": "string",
          "description": "City"
        },
        "region": {
          "type": "string",
          "description": "Region"
        },
        "postCode": {
          "type": "string",
          "description": "Post Code"
        },
        "country": {
          "type": "string",
          "description": "Country"
        },
        "countryCode": {
          "type": "string",
          "description": "Country Code"
        },
        "isBilling": {
          "type": "boolean",
          "description": "Is Billing"
        }
      }
    },
    "AccountBillingOptionsDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "enableOrdering",
        "billToAccountId",
        "autoInvoiceNotificationEnabled",
        "separateInvoicesEnabled",
        "enableReselling",
        "isTaxable",
        "isNetworkReseller",
        "prorateBillingEnabled"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "accountingNo": {
          "type": "string"
        },
        "enableOrdering": {
          "type": "boolean"
        },
        "billToAccountId": {
          "type": "integer",
          "format": "int32"
        },
        "billToAccountName": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        },
        "stateCode": {
          "type": "string"
        },
        "stateName": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "currencyCode": {
          "type": "string"
        },
        "paymentMethod": {
          "type": "string"
        },
        "taxAuthority": {
          "type": "string"
        },
        "tradingName": {
          "type": "string"
        },
        "businessActivity": {
          "type": "string"
        },
        "registrationNumber": {
          "type": "string"
        },
        "autoInvoiceNotificationEnabled": {
          "type": "boolean"
        },
        "separateInvoicesEnabled": {
          "type": "boolean"
        },
        "enableReselling": {
          "type": "boolean"
        },
        "isTaxable": {
          "type": "boolean"
        },
        "isNetworkReseller": {
          "type": "boolean"
        },
        "prorateBillingEnabled": {
          "type": "boolean"
        },
        "prorateBillingDate": {
          "type": "string"
        },
        "creditLimit": {
          "type": "string"
        },
        "partialChargesInvoicing": {
          "type": "string"
        },
        "entityUsage": {
          "type": "string"
        }
      }
    },
    "AccountBillingInfoDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "nextInvoiceDate",
        "lastInvoiceDate",
        "dueInvoiceAmount",
        "overduePayments",
        "balanceAmount",
        "annualSubscriptionValue",
        "monthlyRunRate",
        "activeSubscriptionsCount",
        "openCasesCount",
        "lifetimeSubscriptionValue",
        "availableCredit"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "nextInvoiceDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastInvoiceDate": {
          "type": "string",
          "format": "date-time"
        },
        "dueInvoiceAmount": {
          "type": "number",
          "format": "decimal"
        },
        "overduePayments": {
          "type": "number",
          "format": "decimal"
        },
        "balanceAmount": {
          "type": "number",
          "format": "decimal"
        },
        "annualSubscriptionValue": {
          "type": "number",
          "format": "decimal"
        },
        "monthlyRunRate": {
          "type": "number",
          "format": "decimal"
        },
        "activeSubscriptionsCount": {
          "type": "integer",
          "format": "int32"
        },
        "openCasesCount": {
          "type": "integer",
          "format": "int32"
        },
        "lifetimeSubscriptionValue": {
          "type": "number",
          "format": "decimal"
        },
        "availableCredit": {
          "type": "number",
          "format": "decimal"
        },
        "entityUsage": {
          "type": "string"
        }
      }
    },
    "ContactSaveDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "contactId",
        "accountId",
        "lastName",
        "email",
        "isPrimary",
        "isBillTo",
        "isStorefrontUser",
        "sendNotification"
      ],
      "properties": {
        "contactId": {
          "type": "integer",
          "format": "int32"
        },
        "accountId": {
          "type": "integer",
          "format": "int32"
        },
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "mobilePhone": {
          "type": "string"
        },
        "jobTitle": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email",
          "pattern": "^([a-zA-Z0-9_\\-\\.]+@([a-zA-Z0-9_\\-]+\\.)+[a-zA-Z0-9]{2,12})*$"
        },
        "isPrimary": {
          "type": "boolean"
        },
        "isBillTo": {
          "type": "boolean"
        },
        "fax": {
          "type": "string"
        },
        "isStorefrontUser": {
          "type": "boolean"
        },
        "sendNotification": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "dateFormat": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "customFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomField"
          }
        }
      }
    },
    "ContactNotCreatedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "ContactWithSameEmailNotCreatedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "entity": {
          "type": "string"
        },
        "propery": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "ContactUsername": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "username": {
          "type": "string"
        }
      }
    },
    "UserNotFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "entity": {
          "type": "string"
        },
        "propery": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "ContactNotActivatedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "ContactAlreadyActivatedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "NoInvoicesFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "InvoiceBillingDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "accountId",
        "billingAccountId",
        "date",
        "dueDate",
        "createdDate",
        "paymentDate",
        "grossAmount",
        "discountAmount",
        "netAmount",
        "totalAmount",
        "last update date"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "guid"
        },
        "code": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "stage": {
          "type": "string"
        },
        "paymentMethod": {
          "type": "string"
        },
        "accountId": {
          "type": "integer",
          "format": "int32"
        },
        "accountName": {
          "type": "string"
        },
        "billingAccountId": {
          "type": "integer",
          "format": "int32"
        },
        "billingAccountName": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "dueDate": {
          "type": "string",
          "format": "date-time"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "paymentDate": {
          "type": "string",
          "format": "date-time"
        },
        "grossAmount": {
          "type": "number",
          "format": "decimal"
        },
        "discountAmount": {
          "type": "number",
          "format": "decimal"
        },
        "netAmount": {
          "type": "number",
          "format": "decimal"
        },
        "totalAmount": {
          "type": "number",
          "format": "decimal"
        },
        "last update date": {
          "type": "string",
          "format": "date-time"
        },
        "last update by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "transactionCurrency": {
          "type": "string"
        }
      }
    },
    "InvoiceItemDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "position",
        "quantity",
        "unitPrice",
        "costPrice",
        "discount",
        "vatPercent",
        "finalPrice",
        "dueDate",
        "productId",
        "productTypeId",
        "subscriptionId",
        "subscriptionAddonId",
        "subscriptionActivation",
        "billingPeriodStart",
        "billingPeriodEnd",
        "promotionDiscount",
        "promotionEnd",
        "accountId",
        "contractTermStart",
        "contractTermEnd"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "guid"
        },
        "name": {
          "type": "string"
        },
        "position": {
          "type": "integer",
          "format": "int32"
        },
        "usage": {
          "type": "string"
        },
        "unit": {
          "type": "string"
        },
        "quantity": {
          "type": "number",
          "format": "decimal"
        },
        "unitPrice": {
          "type": "number",
          "format": "decimal"
        },
        "costPrice": {
          "type": "number",
          "format": "decimal"
        },
        "discount": {
          "type": "number",
          "format": "decimal"
        },
        "discountType": {
          "type": "string"
        },
        "vatPercent": {
          "type": "number",
          "format": "decimal"
        },
        "finalPrice": {
          "type": "number",
          "format": "decimal"
        },
        "dueDate": {
          "type": "string",
          "format": "date-time"
        },
        "productId": {
          "type": "string",
          "format": "guid"
        },
        "productCode": {
          "type": "string"
        },
        "productName": {
          "type": "string"
        },
        "productTypeId": {
          "type": "string",
          "format": "guid"
        },
        "productTypeName": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string",
          "format": "guid"
        },
        "subscriptionName": {
          "type": "string"
        },
        "subscriptionAddonId": {
          "type": "string",
          "format": "guid"
        },
        "subscriptionActivation": {
          "type": "string",
          "format": "date-time"
        },
        "billingPeriodStart": {
          "type": "string",
          "format": "date-time"
        },
        "billingPeriodEnd": {
          "type": "string",
          "format": "date-time"
        },
        "promotionName": {
          "type": "string"
        },
        "promotionDiscount": {
          "type": "number",
          "format": "decimal"
        },
        "promotionEnd": {
          "type": "string",
          "format": "date-time"
        },
        "accountId": {
          "type": "integer",
          "format": "int32"
        },
        "accountName": {
          "type": "string"
        },
        "contractTermName": {
          "type": "string"
        },
        "contractTermStart": {
          "type": "string",
          "format": "date-time"
        },
        "contractTermEnd": {
          "type": "string",
          "format": "date-time"
        },
        "comments": {
          "type": "string"
        },
        "usageRecords": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvoiceItemDetailDto"
          }
        },
        "subscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LeaseBillingDto"
          }
        }
      }
    },
    "InvoiceItemDetailDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "position",
        "quantity",
        "unitPrice",
        "costPrice",
        "discount",
        "vatPercent",
        "finalPrice",
        "total",
        "usageStart",
        "usageEnd"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "guid"
        },
        "name": {
          "type": "string"
        },
        "position": {
          "type": "integer",
          "format": "int32"
        },
        "unit": {
          "type": "string"
        },
        "quantity": {
          "type": "number",
          "format": "decimal"
        },
        "unitPrice": {
          "type": "number",
          "format": "decimal"
        },
        "costPrice": {
          "type": "number",
          "format": "decimal"
        },
        "discount": {
          "type": "number",
          "format": "decimal"
        },
        "discountType": {
          "type": "string"
        },
        "vatPercent": {
          "type": "number",
          "format": "decimal"
        },
        "finalPrice": {
          "type": "number",
          "format": "decimal"
        },
        "total": {
          "type": "number",
          "format": "decimal"
        },
        "usageStart": {
          "type": "string",
          "format": "date-time"
        },
        "usageEnd": {
          "type": "string",
          "format": "date-time"
        },
        "comments": {
          "type": "string"
        }
      }
    },
    "LeaseBillingDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "startDate",
        "endDate",
        "activationDate",
        "createdDate",
        "quantity",
        "isTrial",
        "isRenewAutomatically",
        "isUnderPriceProtection"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "guid"
        },
        "externalId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "activationDate": {
          "type": "string",
          "format": "date-time"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "unit": {
          "type": "string"
        },
        "isTrial": {
          "type": "boolean"
        },
        "billingOption": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isRenewAutomatically": {
          "type": "boolean"
        },
        "account": {
          "$ref": "#/definitions/AccountSimpleDto"
        },
        "billingAccount": {
          "$ref": "#/definitions/AccountSimpleDto"
        },
        "contact": {
          "$ref": "#/definitions/ContactSimpleDto"
        },
        "product": {
          "$ref": "#/definitions/ProductSimpleDto"
        },
        "addons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LeaseAddonBillingDto"
          }
        },
        "customFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldDto"
          }
        },
        "isUnderPriceProtection": {
          "type": "boolean"
        },
        "priceProtectionEndDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "AccountSimpleDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "externalId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "currencySign": {
          "type": "string"
        }
      }
    },
    "ContactSimpleDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "isBillTo",
        "isPrimary"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "isBillTo": {
          "type": "boolean"
        },
        "isPrimary": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ProductSimpleDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "guid"
        },
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "LeaseAddonBillingDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "subscriptionId",
        "id",
        "activationDate",
        "quantity",
        "isActive"
      ],
      "properties": {
        "subscriptionId": {
          "type": "string",
          "format": "guid"
        },
        "id": {
          "type": "string",
          "format": "guid"
        },
        "externalId": {
          "type": "string"
        },
        "activationDate": {
          "type": "string",
          "format": "date-time"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "unit": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "comments": {
          "type": "string"
        },
        "product": {
          "$ref": "#/definitions/ProductSimpleDto"
        },
        "cancellationDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "NoCountriesFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "CountryDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "active",
        "default",
        "position",
        "id"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "default": {
          "type": "boolean"
        },
        "position": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "NoCountriesStatesFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "CountryStateDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "active",
        "position",
        "id",
        "countryId"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "position": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "countryId": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "NoDataFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "PaymentMethodDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "position",
        "type",
        "active",
        "default",
        "payDays",
        "storefrontUse"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "guid"
        },
        "name": {
          "type": "string"
        },
        "position": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "$ref": "#/definitions/PaymentTypeEnum"
        },
        "active": {
          "type": "boolean"
        },
        "default": {
          "type": "boolean"
        },
        "erpName": {
          "type": "string"
        },
        "payDays": {
          "type": "integer",
          "format": "int32"
        },
        "storefrontUse": {
          "type": "boolean"
        },
        "gateway": {
          "$ref": "#/definitions/PaymentGatewayDto"
        }
      }
    },
    "PaymentTypeEnum": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Check",
        "CreditCard",
        "Cash",
        "Deposit"
      ],
      "enum": [
        "Check",
        "Credit Card",
        "Cash",
        "Deposit"
      ]
    },
    "PaymentGatewayDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "TaxSimpleDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "active",
        "excludeEU"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "excludeEU": {
          "type": "boolean"
        }
      }
    },
    "TaxRuleDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "rate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "rate": {
          "type": "number",
          "format": "double"
        },
        "tax": {
          "$ref": "#/definitions/TaxSimpleDto"
        },
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxRuleCountryDto"
          }
        },
        "productTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxRuleProdutTypeDto"
          }
        }
      }
    },
    "TaxRuleCountryDto": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "country": {
          "$ref": "#/definitions/SysCountryDto"
        },
        "state": {
          "$ref": "#/definitions/SysCountryStateDto"
        }
      }
    },
    "SysCountryDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "SysCountryStateDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "countryId"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "countryId": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "TaxRuleProdutTypeDto": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "productType": {
          "$ref": "#/definitions/ProductTypeDto"
        }
      }
    },
    "ProductTypeDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "guid"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "IndustryDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CurrencyDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "guid"
        },
        "name": {
          "type": "string"
        },
        "mnemonic": {
          "type": "string"
        },
        "sign": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "PagedResultDtoOfOrganizationLanguageDto": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationLanguageDto"
          }
        },
        "paging": {
          "$ref": "#/definitions/Pageable"
        },
        "links": {
          "$ref": "#/definitions/PageLinkBuilder"
        }
      }
    },
    "OrganizationLanguageDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "guid"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "Pageable": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "page",
        "size",
        "offset",
        "totalCount",
        "pageCount"
      ],
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PageLinkBuilder": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "self": {
          "$ref": "#/definitions/PageLink"
        },
        "first": {
          "$ref": "#/definitions/PageLink"
        },
        "last": {
          "$ref": "#/definitions/PageLink"
        },
        "next": {
          "$ref": "#/definitions/PageLink"
        },
        "previous": {
          "$ref": "#/definitions/PageLink"
        }
      }
    },
    "PageLink": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri"
        },
        "method": {
          "type": "string"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "UnitSimpleDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "guid"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "NoPaymentsFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "PaymentBillingDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "accountId",
        "date",
        "amount",
        "transactionFee",
        "creditCardId",
        "transactionStatus",
        "createdDate",
        "updatedDate"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "guid"
        },
        "code": {
          "type": "string"
        },
        "accountId": {
          "type": "integer",
          "format": "int32"
        },
        "accountName": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "format": "decimal"
        },
        "transactionFee": {
          "type": "number",
          "format": "decimal"
        },
        "chequeNo": {
          "type": "string"
        },
        "chequePayTo": {
          "type": "string"
        },
        "chequeBank": {
          "type": "string"
        },
        "paymentGateway": {
          "type": "string"
        },
        "creditCardId": {
          "type": "string",
          "format": "guid"
        },
        "transactionId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "transactionStatus": {
          "type": "integer",
          "format": "int32"
        },
        "transactionComments": {
          "type": "string"
        },
        "comments": {
          "type": "string"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "InvalidDateFormatError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "PaymentSaveDto": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "accountId": {
          "type": "string"
        },
        "invoiceId": {
          "type": "string"
        },
        "paymentMethod": {
          "type": "string"
        },
        "paymentDate": {
          "type": "string"
        },
        "dueDate": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "transactionFee": {
          "type": "string"
        },
        "chequeNo": {
          "type": "string"
        },
        "chequePayTo": {
          "type": "string"
        },
        "chequeBank": {
          "type": "string"
        },
        "transactionId": {
          "type": "string"
        },
        "responsibleUser": {
          "type": "string"
        },
        "comments": {
          "type": "string"
        }
      }
    },
    "PaymentNotAddedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "PaymentsNotImportedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "PricelistsDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "active",
        "fromDate",
        "toDate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "fromDate": {
          "type": "string",
          "format": "date-time"
        },
        "toDate": {
          "type": "string",
          "format": "date-time"
        },
        "currency": {
          "$ref": "#/definitions/CurrencyDto"
        }
      }
    },
    "PricelistItemDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "pricingMethod",
        "roundingPolicy",
        "status"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "product": {
          "$ref": "#/definitions/ProductSimpleDto"
        },
        "pricingMethod": {
          "$ref": "#/definitions/PricingMethodEnum"
        },
        "roundingPolicy": {
          "$ref": "#/definitions/RoundingPolicyEnum"
        },
        "roundingDecimals": {
          "type": "integer",
          "format": "int32"
        },
        "amount": {
          "type": "number",
          "format": "decimal"
        },
        "price": {
          "type": "number",
          "format": "decimal"
        },
        "unit": {
          "$ref": "#/definitions/UnitSimpleDto"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PricingMethodEnum": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "CurrencyAmount",
        "PercentSellPrice",
        "PercentMarkupCostPrice",
        "PercentMarginCostPrice"
      ],
      "enum": [
        "Currency Amount",
        "Percent of Sell Price",
        "Percent Markup - Cost Price",
        "Percent Margin - Cost Price"
      ]
    },
    "RoundingPolicyEnum": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "None",
        "RemoveDecimals",
        "RoundingToInteger",
        "RoundingOfDecimalPart"
      ],
      "enum": [
        "None",
        "Remove decimals",
        "Rounding to integer",
        "Rounding of decimal part"
      ]
    },
    "ProductNotFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "entity": {
          "type": "string"
        },
        "propery": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "ProductLoadDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "isBundle",
        "isDeleted",
        "numberOfDecimals",
        "webOrderEnabled",
        "isProductGroup"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "guid"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "shortDescription": {
          "type": "string"
        },
        "fullDescription": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "isNegative": {
          "type": "boolean"
        },
        "comments": {
          "type": "string"
        },
        "numberOfDecimals": {
          "type": "integer",
          "format": "int32"
        },
        "isCompetitive": {
          "type": "boolean"
        },
        "competitionComments": {
          "type": "string"
        },
        "activateAllUnits": {
          "type": "boolean"
        },
        "filePath": {
          "type": "string"
        },
        "billingOption": {
          "type": "integer",
          "format": "int32"
        },
        "isAddon": {
          "type": "boolean"
        },
        "chargeRule": {
          "type": "string"
        },
        "webOrderEnabled": {
          "type": "integer",
          "format": "byte"
        },
        "isProductGroup": {
          "type": "boolean"
        },
        "includeAllProducts": {
          "type": "integer",
          "format": "int32"
        },
        "extraKeyWords": {
          "type": "string"
        },
        "requestType": {
          "type": "integer",
          "format": "int32"
        },
        "userProvisioningEnabled": {
          "type": "integer",
          "format": "int32"
        },
        "taxCode": {
          "type": "string"
        },
        "customFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldDto"
          }
        }
      }
    },
    "LeaseNotFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "entity": {
          "type": "string"
        },
        "propery": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "NoLeaseUsageRecordsFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "UsageSimpleDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "totalQuantity",
        "totalPrice"
      ],
      "properties": {
        "meterName": {
          "type": "string"
        },
        "meterCategory": {
          "type": "string"
        },
        "meterSubCategory": {
          "type": "string"
        },
        "meterRegion": {
          "type": "string"
        },
        "unit": {
          "type": "string"
        },
        "resourceGroup": {
          "type": "string"
        },
        "totalQuantity": {
          "type": "number",
          "format": "decimal"
        },
        "resourceName": {
          "type": "string"
        },
        "totalPrice": {
          "type": "number",
          "format": "decimal"
        }
      }
    },
    "LeaseDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "startDate",
        "endDate",
        "effectiveDate",
        "account",
        "billingAccount",
        "quantity",
        "autoRenew",
        "productId",
        "isTrial",
        "contactId",
        "billingOption",
        "dataMigration",
        "pricelistId",
        "isUserPrice",
        "responsibleUserId",
        "sharingRuleId"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "guid"
        },
        "name": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time"
        },
        "stage": {
          "$ref": "#/definitions/LeaseStageDto"
        },
        "account": {
          "$ref": "#/definitions/AccountDto"
        },
        "billingAccount": {
          "$ref": "#/definitions/AccountDto"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "autoRenew": {
          "type": "boolean"
        },
        "productId": {
          "type": "string",
          "format": "guid"
        },
        "isTrial": {
          "type": "boolean"
        },
        "contactId": {
          "type": "integer",
          "format": "int32"
        },
        "expirationNotice": {
          "type": "integer",
          "format": "int32"
        },
        "billingOption": {
          "type": "boolean"
        },
        "unit": {
          "type": "string"
        },
        "unitId": {
          "type": "string",
          "format": "guid"
        },
        "dataMigration": {
          "type": "boolean"
        },
        "pricelistId": {
          "type": "integer",
          "format": "int32"
        },
        "isUserPrice": {
          "type": "boolean"
        },
        "responsibleUserId": {
          "type": "integer",
          "format": "int32"
        },
        "sharingRuleId": {
          "type": "integer",
          "format": "int32"
        },
        "usage": {
          "type": "string"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LeaseVariationDto"
          }
        },
        "promotionId": {
          "type": "string",
          "format": "guid"
        },
        "orderId": {
          "type": "string",
          "format": "guid"
        }
      }
    },
    "LeaseStageDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "AccountDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "enableOrdering",
        "isLead",
        "enableReselling",
        "autoInvoiceNotificationEnabled",
        "prorateBillingEnabled",
        "creaditLimitAmount",
        "unlimitedCreditLimit",
        "partialChargesInvoicing",
        "useDebitInvoice",
        "separateInvoicesEnabled",
        "isTaxable",
        "validVatNum",
        "currencyId"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "job": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "webSite": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "taxAuthority": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "corpEmail": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "enableOrdering": {
          "type": "boolean"
        },
        "isLead": {
          "type": "boolean"
        },
        "enableReselling": {
          "type": "boolean"
        },
        "autoInvoiceNotificationEnabled": {
          "type": "boolean"
        },
        "prorateBillingEnabled": {
          "type": "integer",
          "format": "int32"
        },
        "creaditLimitAmount": {
          "type": "number",
          "format": "decimal"
        },
        "unlimitedCreditLimit": {
          "type": "boolean"
        },
        "partialChargesInvoicing": {
          "type": "integer",
          "format": "int32"
        },
        "useDebitInvoice": {
          "type": "integer",
          "format": "int32"
        },
        "separateInvoicesEnabled": {
          "type": "boolean"
        },
        "locationCode": {
          "type": "string"
        },
        "isTaxable": {
          "type": "boolean"
        },
        "vatNumber": {
          "type": "string"
        },
        "validVatNum": {
          "type": "integer",
          "format": "int32"
        },
        "currencyId": {
          "type": "string",
          "format": "guid"
        },
        "organization": {
          "$ref": "#/definitions/OrganizationDto"
        }
      }
    },
    "OrganizationDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "currency": {
          "$ref": "#/definitions/CurrencyDto"
        }
      }
    },
    "LeaseVariationDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "subscriptionId",
        "variationId",
        "allowUnlimited"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "subscriptionId": {
          "type": "string",
          "format": "guid"
        },
        "variationId": {
          "type": "string",
          "format": "guid"
        },
        "variationName": {
          "type": "string"
        },
        "variationValueIds": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "allowUnlimited": {
          "type": "boolean"
        }
      }
    },
    "LeaseNotCreatedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "MutuallyExcludedSubscriptionFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "CancelSubscriptionRequestDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "cancellationType",
        "forceOSSProvisioning",
        "updateCitrixExternalSystem"
      ],
      "properties": {
        "cancellationType": {
          "$ref": "#/definitions/CancellationType"
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time"
        },
        "comments": {
          "type": "string"
        },
        "forceOSSProvisioning": {
          "type": "boolean"
        },
        "updateCitrixExternalSystem": {
          "type": "boolean"
        }
      }
    },
    "CancellationType": {
      "type": "integer",
      "description": "",
      "x-enumNames": [
        "Inmediate",
        "OnSubscriptionEnd",
        "SpecificDate"
      ],
      "enum": [
        0,
        1,
        2
      ]
    },
    "PermissionDeniedServiceError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "userId": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "entity": {
          "type": "string"
        },
        "entityId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "LeaseNotCancelledError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "InvalidEffectiveDateError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "SubscriptionActionResponseDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "succeed"
      ],
      "properties": {
        "succeed": {
          "type": "boolean"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LeaseErrorDto"
          }
        }
      }
    },
    "LeaseErrorDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "severity"
      ],
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "severity": {
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "ChangeSubscriptionQuantityRequestDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "quantity",
        "forceOSSProvisioning",
        "updateCitrixExternalSystem"
      ],
      "properties": {
        "quantity": {
          "type": "number",
          "format": "decimal"
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time"
        },
        "comments": {
          "type": "string"
        },
        "forceOSSProvisioning": {
          "type": "boolean"
        },
        "updateCitrixExternalSystem": {
          "type": "boolean"
        }
      }
    },
    "LeaseQuantityNotChangedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "SubscriptionActionRequestDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "forceOSSProvisioning",
        "updateCitrixExternalSystem"
      ],
      "properties": {
        "effectiveDate": {
          "type": "string",
          "format": "date-time"
        },
        "comments": {
          "type": "string"
        },
        "forceOSSProvisioning": {
          "type": "boolean"
        },
        "updateCitrixExternalSystem": {
          "type": "boolean"
        }
      }
    },
    "LeaseNotSuspendedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "ActivateSubscriptionRequestDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "endOfBillingPeriod",
        "forceOSSProvisioning",
        "updateCitrixExternalSystem"
      ],
      "properties": {
        "activationDate": {
          "type": "string",
          "format": "date-time"
        },
        "endOfBillingPeriod": {
          "type": "boolean"
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time"
        },
        "comments": {
          "type": "string"
        },
        "forceOSSProvisioning": {
          "type": "boolean"
        },
        "updateCitrixExternalSystem": {
          "type": "boolean"
        }
      }
    },
    "LeaseNotActivatedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "ChangeSubscriptionPricingRequestDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "applyToCurrentCycle",
        "billOnStart",
        "userDefinedUnitPrice",
        "userDefinedDiscount",
        "unitId"
      ],
      "properties": {
        "applyToCurrentCycle": {
          "type": "boolean"
        },
        "billOnStart": {
          "type": "boolean"
        },
        "userDefinedUnitPrice": {
          "type": "boolean"
        },
        "userDefinedDiscount": {
          "type": "boolean"
        },
        "unitId": {
          "type": "string",
          "format": "guid"
        },
        "pricelistId": {
          "type": "integer",
          "format": "int32"
        },
        "unitPrice": {
          "type": "number",
          "format": "decimal"
        },
        "discount": {
          "$ref": "#/definitions/LeaseDiscountDto"
        }
      }
    },
    "LeaseDiscountDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "amount"
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/DiscountType"
        },
        "amount": {
          "type": "number",
          "format": "decimal"
        }
      }
    },
    "DiscountType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Percentage",
        "Amount"
      ],
      "enum": [
        "Percentage",
        "Amount"
      ]
    },
    "UnitNotFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "entity": {
          "type": "string"
        },
        "propery": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "LeasePricingInfoNotChangedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "ChangeSubscriptionAddonPricingRequestDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "applyToCurrentCycle",
        "userDefinedUnitPrice",
        "userDefinedDiscount"
      ],
      "properties": {
        "applyToCurrentCycle": {
          "type": "boolean"
        },
        "userDefinedUnitPrice": {
          "type": "boolean"
        },
        "userDefinedDiscount": {
          "type": "boolean"
        },
        "pricelistId": {
          "type": "integer",
          "format": "int32"
        },
        "unitPrice": {
          "type": "number",
          "format": "decimal"
        },
        "discount": {
          "$ref": "#/definitions/LeaseDiscountDto"
        }
      }
    },
    "AddonItemNotFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "entity": {
          "type": "string"
        },
        "propery": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "LeaseAddonPricingInfoNotChangedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "LeaseAddonDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "subscriptionId",
        "addonId",
        "signupDate",
        "quantity",
        "unit",
        "pricelistId",
        "dataMigration"
      ],
      "properties": {
        "subscriptionId": {
          "type": "string"
        },
        "addonId": {
          "type": "string"
        },
        "signupDate": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "unit": {
          "type": "string"
        },
        "pricelistId": {
          "type": "integer",
          "format": "int32"
        },
        "dataMigration": {
          "type": "boolean"
        }
      }
    },
    "LeaseAddonNotAddedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "CancelSubscriptionAddonRequestDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "forceOSSProvisioning",
        "updateCitrixExternalSystem"
      ],
      "properties": {
        "effectiveDate": {
          "type": "string",
          "format": "date-time"
        },
        "comments": {
          "type": "string"
        },
        "forceOSSProvisioning": {
          "type": "boolean"
        },
        "updateCitrixExternalSystem": {
          "type": "boolean"
        }
      }
    },
    "LeaseAddonNotCancelledError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "LeaseAddonQuantityNotChangedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "LeaseQuantityLimitReachedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "NoSystemCountriesFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "NoSystemCountriesStatesFoundError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        }
      }
    },
    "SysInvoiceTypesDto": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "type",
        "active",
        "default"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/InvoiceTypeEnum"
        },
        "active": {
          "type": "boolean"
        },
        "default": {
          "type": "boolean"
        }
      }
    },
    "InvoiceTypeEnum": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Credit",
        "Debit"
      ],
      "enum": [
        "Credit Invoice",
        "Debit Invoice"
      ]
    }
  },
  "securityDefinitions": {
    "bss_auth": {
      "type": "oauth2",
      "flow": "password",
      "tokenUrl": "../oauth/token"
    },
    "api_version": {
      "type": "apiKey",
      "description": "description: Insert the API Version (Currently 1, 2, 2.1, 2.2 or latest)  and click Authorize!",
      "name": "X-Api-Version",
      "in": "header",
      "tokenUrl": "../oauth/token"
    }
  },
  "security": [
    {
      "bss_auth": []
    },
    {
      "api_version": []
    }
  ]
}